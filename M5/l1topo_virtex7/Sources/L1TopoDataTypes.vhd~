library ieee;
use ieee.std_logic_1164.all;

Package L1TopoDataTypes is
	-- generics for the algorithm module
	constant InputWidthEM                : integer := 120;
	constant InputwidthTAU               : integer := 120;
	constant InputWidthJET               : integer := 64;
	constant InputWidthMU                : integer := 32;
	
	constant InputWidth1stStageSortEM    : integer := 20;
	constant InputWidth1stStageSelectEM  : integer := 30;
	constant InputWidth1stStageSortTAU   : integer := 20;
	constant InputWidth1stStageSelectTAU : integer := 30;
	constant InputWidth1stStageSortJET   : integer := 16;
	constant InputWidth1stStageSelectJET : integer := 16;
	constant InputWidth1stStageSortMU    : integer := 16;
	constant InputWidth1stStageSelectMU  : integer := 16;
	
	constant OutputWidthSortEM           : integer := 6;
	constant OutputWidthSelectEM         : integer := 6;
	constant OutputWidthSortTAU          : integer := 6;
	constant OutputWidthSelectTAU        : integer := 6;
	constant OutputWidthSortJET          : integer := 10;
	constant OutputWidthSelectJET        : integer := 10;
	constant OutputWidthSortMU           : integer := 6;
	constant OutputWidthSelectMU         : integer := 6;
	
	constant NumberOfAlgorithms          : integer := 30;
	constant NumberOfSortAlgorithms      : integer := 35;
	constant NumberOfResultBits          : integer := 31;  --ratio of results to overflow is adjustable (needs some more thoughts, which overflows are useful)
	constant NumberOfOverflowBits        : integer := 31;
	constant NumberOfOutputBits          : integer := 16;  --there are only 32 lines from a L1Topo-Module to CTP => 16 lines per processor

	-- Maximum number of components that require parameters
	constant max_components : integer := 70; --TODO: unused!
	constant max_jets       : integer := 48; --TODO: unused!
	constant max_clusters   : integer := 80; --TODO: unused!

	-- Max number of TOBs to be analysed by inclusive algorithms:
	constant max_incl_jets     : integer := 8; --TODO: unused!
	constant max_incl_clusters : integer := 8; --TODO: unused!

	--Internal Data width
	--constant data_width : integer := 32;
	--Internal Data from MGTs 
	--type arraySLV128 is array (natural range <>) of std_logic_vector(128 - 1 downto 0);
	--type arraySLV32 is array (natural range <>) of std_logic_vector(32 - 1 downto 0);
	--type arraySLV32 is array (natural range <>) of std_logic_vector(data_width - 1 downto 0);
	--type arraySLV16 is array (natural range <>) of std_logic_vector(16 - 1 downto 0);
	--type arraySLV8 is array (natural range <>) of std_logic_vector(8 - 1 downto 0);
	--type arraySLV5 is array (natural range <>) of std_logic_vector(5 - 1 downto 0);
	--type arraySLV4 is array (natural range <>) of std_logic_vector(4 - 1 downto 0);
	--type arraySLV3 is array (natural range <>) of std_logic_vector(3 - 1 downto 0);
	--type arraySLV2 is array (natural range <>) of std_logic_vector(2 - 1 downto 0);
	--type arraySLV1 is array (natural range <>) of std_logic_vector(1 - 1 downto 0);
	--type arraySL is array (natural range <>) of std_logic;   
	
	--36bit data type for playback/spy data(32bit) + charisk(4bit)
	--type ArrayOf36bitVectors is array (natural range <>) of std_logic_vector(35 downto 0);

	-- TOB data are arranged as arrays of records. Use these for unsorted/presorted TOBs:


	type ClusterTOB is record
		Et   : std_logic_vector(7 downto 0);
		Isol : std_logic_vector(4 downto 0);
		Eta  : std_logic_vector(5 downto 0);
		Phi  : std_logic_vector(5 downto 0);
	end record;

	type JetTOB is record
		Et1 : std_logic_vector(8 downto 0);
		Et2 : std_logic_vector(9 downto 0);
		Eta : std_logic_vector(4 downto 0);
		Phi : std_logic_vector(4 downto 0);
	end record;

	type MuonTOB is record --TODO: How translate MuonTOB binning to GenericTOB??? Where? In Selection/Sort algos? Other Types converted correctly?
		Eta : std_logic_vector(2 downto 0);
		Phi : std_logic_vector(2 downto 0);
		Pt  : std_logic_vector(1 downto 0);
	end record;

	type ClusterArray is array (natural range <>) of ClusterTOB;
	type JetArray is array (natural range <>) of JetTOB;
	type MuonArray is array (natural range <>) of MuonTOB;

	-- After selection and sorting, TOB data are all of same type.
	-- Use a generic TOB record for sorted TOBs:

	type GenericTOB is record
		Et  : std_logic_vector(9 downto 0); -- Pad unused bits with zeros, they will be optimised away
		Eta : std_logic_vector(5 downto 0); -- Again, pad bottom bit with zero for muons and jets
		Phi : std_logic_vector(5 downto 0);
	end record;

	type TOBArray is array (natural range <>) of GenericTOB;

	-- Parameters for configuring the trigger algorithms

	constant MaxParams : integer := 5;  -- Maximum number of parameters

	type ParameterArray is array (MaxParams - 1 downto 0) of std_logic_vector(31 downto 0);
	type ParameterSpace is array (natural range <>) of ParameterArray;


end L1TopoDataTypes;

package body L1TopoDataTypes is
end L1TopoDataTypes;  