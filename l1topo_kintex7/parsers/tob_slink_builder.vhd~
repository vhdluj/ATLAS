library IEEE;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.rod_l1_topo_types_const.all;

entity tob_slink_builder is
  generic (
    VIVADO : boolean := false);
  port (
    RESET                      : in  std_logic;
    CLK                        : in  std_logic;
    CLK_SPEED                  : in  std_logic;
    --TOB data and configuration
    TOB_DATA_IN                : in  std_logic_vector(127 downto 0) := (others => '0');
    LINK_NUMBER                : in  std_logic_vector(6 downto 0);
    BCID_OFFSET_IN             : in  std_logic_vector(3 downto 0);
    MAX_OFFSET_IN              : in  std_logic_vector(3 downto 0);
    CRATE_ASSIGNMENT           : in  std_logic_vector(NUMBER_OF_ROS_ROI_INPUT_BUSES*4-1 downto 0);
    DATA_VALID_IN              : in  std_logic;
    BEGINNING_OF_DATA          : in  std_logic;
    END_OF_DATA                : in  std_logic;
--    SLINK_PACKET_BUSY          : in  std_logic;
    ACTIVE_LINKS               : in  std_logic_vector(log2_int(NUMBER_OF_ROS_ROI_INPUT_BUSES) downto 0);
    BUILDER_BUSY               : out std_logic;   
    --from/to slink wrapper
    SLINK_CLK                  : in  std_logic;
    SLINK_DATA_OUT             : out std_logic_vector(31 downto 0);
    SLINK_READY_IN             : in  std_logic;
    SLINK_EVENT_READY_OUT      : out std_logic
    );
end tob_slink_builder;

architecture tob_slink_builder of tob_slink_builder is
  
  type link_cntr_array is array (0 to NUMBER_OF_ROS_ROI_INPUT_BUSES) of unsigned(3 downto 0);
  type slice_link_cntr_array  is array (0 to 6) of link_cntr_array;
  signal slice_link_cntr_a_saved, slice_link_cntr_a : slice_link_cntr_array;
  signal slice_link_cntr_2a : slice_link_cntr_array;
  signal slice_cntr, slice_cntr_delayed : unsigned(3 downto 0);
  signal slice_fifo_wr_en, slice_fifo_rd_en, slice_fifo_rd_en_fsm : std_logic_vector(6 downto 0);
  signal link_fifo_full, link_fifo_empty : std_logic_vector(6 downto 0);
  type fifo_data_out_array is array (0 to 6) of std_logic_vector(135 downto 0);
  signal fifo_data_out_a : fifo_data_out_array;
  signal tob_data_out : std_logic_vector((MAX_TOB_NUMBER+1)*32-1 downto 0) := (others => '0');
  signal tob_data_in_sync : std_logic_vector(135 downto 0);
  signal event_saved : std_logic := '0';
  type slink_fiber_cntr_data_array is array (0 to NUMBER_OF_ROS_ROI_INPUT_BUSES/5) of std_logic_vector(31 downto 0);
  type slink_fiber_cntr_data_2array is array (0 to 6) of slink_fiber_cntr_data_array;
  signal slink_fiber_cntr_data_2a : slink_fiber_cntr_data_2array;
  signal tob_cntr_out_l : std_logic_vector(3 downto 0);
  signal prev_link_number, link_number_delayed : std_logic_vector(6 downto 0);
  signal data_valid_delayed_a, data_valid_delayed : std_logic;
  signal tob_conseq_nrs_l : std_logic_vector(4*9-1 downto 0);
  signal slink_slice_cntr : unsigned(2 downto 0);
  signal slink_data_in, slink_data_in_fsm, slink_data_out_l: std_logic_vector(32 downto 0);
  signal slink_fifo_wr_en, slink_fifo_rd_en, slink_fifo_wr_en_fsm, bcid_cntr_up, bcid_cntr_up_fsm, slink_slice_cntr_up, slink_slice_cntr_up_fsm : std_logic;
  signal cdc_cntr : std_logic_vector(3 downto 0);
  signal slink_data_out_l_sync, slink_data_out_l_end_pulse, cdc_event_finished : std_logic;
  signal cdc_event_finished_v : std_logic_vector(4 downto 0);
  signal event_cntr : std_logic_vector(10 downto 0);
  signal tob_type_l : std_logic_vector(3 downto 0) := x"4";
  signal slink_fifo_full, slink_fifo_empty, event_readout_pulse : std_logic;
  signal fiber_cntr : unsigned(6 downto 0);
  signal bcid_cntr, tob_conseq_pntr : unsigned(3 downto 0);
  signal wait_cntr : unsigned(2 downto 0);
  
  component fifo_136b_512W_kintex_vivado is
    port (
      rst       : in  std_logic;
      wr_clk    : in  std_logic;
      rd_clk    : in  std_logic;
      din       : in  std_logic_vector(135 downto 0);
      wr_en     : in  std_logic;
      rd_en     : in  std_logic;
      dout      : out std_logic_vector(135 downto 0);
      full      : out std_logic;
      empty     : out std_logic
      );
  end component;

  component fifo_32b_1024W_kintex_vivado is
    port (
      rst       : in  std_logic;
      wr_clk    : in  std_logic;
      rd_clk    : in  std_logic;
      din       : in  std_logic_vector(32 downto 0);
      wr_en     : in  std_logic;
      rd_en     : in  std_logic;
      dout      : out std_logic_vector(32 downto 0);
      full      : out std_logic;
      empty     : out std_logic
      );
  end component;

  component fifo_32b_1024W_kintex is
    port (
      rst       : in  std_logic;
      wr_clk    : in  std_logic;
      rd_clk    : in  std_logic;
      din       : in  std_logic_vector(32 downto 0);
      wr_en     : in  std_logic;
      rd_en     : in  std_logic;
      dout      : out std_logic_vector(32 downto 0);
      full      : out std_logic;
      empty     : out std_logic
      );
  end component;

  component fifo_136b_512W_kintex is
    port (
      rst       : in  std_logic;
      wr_clk    : in  std_logic;
      rd_clk    : in  std_logic;
      din       : in  std_logic_vector(135 downto 0);
      wr_en     : in  std_logic;
      rd_en     : in  std_logic;
      dout      : out std_logic_vector(135 downto 0);
      full      : out std_logic;
      empty     : out std_logic
      );
  end component;

  type SLINK_BUILDER is (IDLE, BLOCK_HEADER, WAIT_FOR_FIFO_DATA, DATA_WRITE, FIBER_CNTRS, FINISHED);
  signal SLINK_BUILDER_CURRENT, SLINK_BUILDER_NEXT : SLINK_BUILDER;

begin
-------------------------------------------------------------------------------
-- PARSER
-------------------------------------------------------------------------------
  
  SYNC_DATA_IN_PROC: process (CLK)
  begin
    if rising_edge(CLK) then
      if END_OF_DATA = '0' then
        tob_data_in_sync <= "0" & LINK_NUMBER & TOB_DATA_IN;
        prev_link_number <= LINK_NUMBER;
        link_number_delayed <= prev_link_number;
      else
        tob_data_in_sync <= "1" & LINK_NUMBER & TOB_DATA_IN;
        prev_link_number <= LINK_NUMBER;
        link_number_delayed <= prev_link_number;
      end if;
    end if;
  end process SYNC_DATA_IN_PROC;
  
  SLICE_CNTR_PROC: process (CLK)
  begin  
    if rising_edge(CLK) then
      if BEGINNING_OF_DATA = '1' then
        slice_cntr <= unsigned(MAX_OFFSET_IN) - unsigned(BCID_OFFSET_IN);
        slice_cntr_delayed <= slice_cntr;
        --It is not possible to send more than 7 slices !! 
      elsif prev_link_number /= LINK_NUMBER then
        slice_cntr <= unsigned(MAX_OFFSET_IN) - unsigned(BCID_OFFSET_IN);
        slice_cntr_delayed <= slice_cntr;
      elsif prev_link_number = LINK_NUMBER and DATA_VALID_IN = '1' and slice_cntr < 6 then
        slice_cntr <= slice_cntr + 1;
        slice_cntr_delayed <= slice_cntr;
      else
        slice_cntr <= slice_cntr;
        slice_cntr_delayed <= slice_cntr;
      end if;
    end if;
  end process SLICE_CNTR_PROC;

  GENERATE_FIFOS: for i in 0 to 6 generate
    SET_WR_EN: process (CLK)
    begin
      if rising_edge(CLK) then
        if DATA_VALID_IN = '1' and slice_cntr = i then
          slice_fifo_wr_en(i) <= '1';
        else
          slice_fifo_wr_en(i) <= '0' or END_OF_DATA;
        end if;
      end if;
    end process SET_WR_EN;
  
    FIFO_VIVADO_TOB: if VIVADO = true generate
      SLICE_FIFO: fifo_136b_512W_kintex_vivado
        port map (
          rst       => RESET,
          wr_clk    => CLK,
          rd_clk    => CLK_SPEED,
          din       => tob_data_in_sync,
          wr_en     => slice_fifo_wr_en(i),
          rd_en     => slice_fifo_rd_en(i),
          dout      => fifo_data_out_a(i),
          full      => link_fifo_full(i),
          empty     => link_fifo_empty(i)
          );
    end generate FIFO_VIVADO_TOB;

    FIFO_ISE_TOB: if VIVADO = false generate
      SLICE_FIFO: fifo_136b_512W_kintex
        port map (
          rst       => RESET,
          wr_clk    => CLK,
          rd_clk    => CLK_SPEED,
          din       => tob_data_in_sync,
          wr_en     => slice_fifo_wr_en(i),
          rd_en     => slice_fifo_rd_en(i),
          dout      => fifo_data_out_a(i),
          full      => link_fifo_full(i),
          empty     => link_fifo_empty(i)
          );
    end generate FIFO_ISE_TOB;
    
  end generate GENERATE_FIFOS;  

  TOB_BCID_CNTR_INST: entity work.tob_bcid_cntr
    port map (
      CLK            => CLK,
      TOB_DATA_IN    => TOB_DATA_IN,
      TOB_TYPE       => tob_type_l,
      TOB_CNTR_OUT   => tob_cntr_out_l,
      TOB_CONSEQ_NRS => open--tob_conseq_nrs
      );

  DELAY_DATA_VALID : process (CLK)
  begin
    if rising_edge(CLK) then
      data_valid_delayed_a <= DATA_VALID_IN;
      data_valid_delayed <= data_valid_delayed_a;
    end if;
  end process DELAY_DATA_VALID;
  
  SET_SLICE_LINK_CNTR_PROC : process (CLK)
  begin
    if rising_edge(CLK) then
      if END_OF_DATA = '1' then
        slice_link_cntr_a <= (others => (others => "0"));
        slice_link_cntr_a_saved <= slice_link_cntr_a;
      elsif data_valid_delayed = '1' then
        slice_link_cntr_a(to_integer(slice_cntr_delayed))(std_int(link_number_delayed)) <= unsigned(tob_cntr_out_l);
        slice_link_cntr_a_saved <= slice_link_cntr_a_saved;
      else
        slice_link_cntr_a <= slice_link_cntr_a;
        slice_link_cntr_a_saved <= slice_link_cntr_a_saved;
      end if;
    end if;
  end process SET_SLICE_LINK_CNTR_PROC;

-------------------------------------------------------------------------------
-- INTERNAL RESHUFFLING - may be different faster clock
-------------------------------------------------------------------------------  
  GENERATE_PARSERS: for i in 0 to 6 generate
    TOB_PARSER_INST: entity work.tob_parser  --2clocks delay
      port map (
        CLK          => CLK_SPEED,
--        CRATE_NUMBER => CRATE_NUMBER,
        LINK_NUMBER  => fifo_data_out_a(i)(134 downto 128),
        TOB_DATA_IN  => fifo_data_out_a(i)(127 downto 0),
        TOB_DATA_OUT => tob_data_out);
    
    TOB_CONSEQ_CNTR_INST: entity work.tob_bcid_cntr  --2clocks delay
      port map (
        CLK            => CLK_SPEED,
        TOB_DATA_IN    => TOB_DATA_IN,
        TOB_TYPE       => x"7", 
        TOB_CNTR_OUT   => open,
        TOB_CONSEQ_NRS => tob_conseq_nrs_l
      );
  end generate GENERATE_PARSERS;
  
  VIVADO_FIFO_INT: if VIVADO = true generate
    SLINK_FIFO: fifo_32b_1024W_kintex_vivado
    port map (
      rst       => RESET,
      wr_clk    => CLK_SPEED,
      rd_clk    => SLINK_CLK,
      din       => slink_data_in,
      wr_en     => slink_fifo_wr_en,
      rd_en     => slink_fifo_rd_en,
      dout      => slink_data_out_l,
      full      => slink_fifo_full,
      empty     => slink_fifo_empty
      );
  end generate VIVADO_FIFO_INT;

   ISE_FIFO_INT: if VIVADO = false generate
    SLINK_FIFO: fifo_32b_1024W_kintex
    port map (
      rst       => RESET,
      wr_clk    => CLK_SPEED,
      rd_clk    => SLINK_CLK,
      din       => slink_data_in,
      wr_en     => slink_fifo_wr_en,
      rd_en     => slink_fifo_rd_en,
      dout      => slink_data_out_l,
      full      => slink_fifo_full,
      empty     => slink_fifo_empty
      );
  end generate ISE_FIFO_INT;
  
  SET_EVENT_SAVED : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if END_OF_DATA  = '1' then
        event_saved <= '1';
      elsif SLINK_BUILDER_CURRENT = BLOCK_HEADER then
        event_saved <= '0';
      else
        event_saved <= event_saved;
      end if;
    end if;
  end process SET_EVENT_SAVED;

  BCID_CNTR_SAVE: for j in 0 to 6 generate  --loop over SLICE
    MAKE_FIBER_CNTRS: for i in 0 to NUMBER_OF_ROS_ROI_INPUT_BUSES-1 generate
      slink_fiber_cntr_data_2a(j)(i/5)((27-(i mod 5)*5-1) downto 23-(i mod 5)*5) <= std_logic_vector(slice_link_cntr_a_saved(j)(i));
      slink_fiber_cntr_data_2a(j)(i/5)(27-(i mod 5)*5) <= '0';
      --here "0" should be exchange with one when special data is send (OV,
      --errors ....)
    end generate MAKE_FIBER_CNTRS;
  end generate BCID_CNTR_SAVE;
  
  SLINK_BUILDER_CLK : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if RESET = '1' then
        SLINK_BUILDER_CURRENT   <= IDLE;
        slink_data_in       <= (others => '0');
        slink_fifo_wr_en    <= '1';
        slice_fifo_rd_en    <= (others => '0');
        bcid_cntr_up        <= '0';
        slink_slice_cntr_up <= '0';
      else
        SLINK_BUILDER_CURRENT   <= SLINK_BUILDER_NEXT;
        slink_data_in       <= slink_data_in_fsm;
        slink_fifo_wr_en    <= slink_fifo_wr_en_fsm;
        slice_fifo_rd_en    <= slice_fifo_rd_en_fsm;
        bcid_cntr_up        <= bcid_cntr_up_fsm;
        slink_slice_cntr_up <= slink_slice_cntr_up_fsm;
      end if;
    end if;
  end process SLINK_BUILDER_CLK;

    
  SLINK_BUILDER_PROC : process (CLK_SPEED)
  begin
    slink_data_in_fsm       <= ('1',others => '0');
    slink_fifo_wr_en_fsm    <= '1';
    slice_fifo_rd_en_fsm    <= (others => '0');
    bcid_cntr_up_fsm        <= '0';
    slink_slice_cntr_up_fsm <= '0';
    case (SLINK_BUILDER_CURRENT) is
      
      when IDLE      =>
        slink_fifo_wr_en_fsm <= '0';
        if event_saved = '1' then
          SLINK_BUILDER_NEXT <= BLOCK_HEADER;
        else
          SLINK_BUILDER_NEXT <= IDLE;
        end if;
        
      when BLOCK_HEADER =>
        slink_data_in_fsm(31 downto 5) <= BLOCK_WORD_TYPE & x"0" & ACTIVE_LINKS & x"0000" & "0";

        if slink_slice_cntr = 7 then
          slink_data_in_fsm(4) <= '1';
        else
          slink_data_in_fsm(4) <= link_fifo_empty(to_integer(slink_slice_cntr)+1);
        end if;
        if slink_slice_cntr > unsigned(MAX_OFFSET_IN) then
          slink_data_in_fsm(2 downto 0) <= std_logic_vector(slink_slice_cntr(2 downto 0) - unsigned(MAX_OFFSET_IN) - 1);
          slink_data_in_fsm(3) <= '0';
        else
          slink_data_in_fsm(2 downto 0) <= std_logic_vector(unsigned(MAX_OFFSET_IN(2 downto 0)) - slink_slice_cntr(2 downto 0));
          slink_data_in_fsm(3) <= '1';
        end if;
        SLINK_BUILDER_NEXT <= FIBER_CNTRS;
        
      when FIBER_CNTRS =>
        if fiber_cntr = to_unsigned(NUMBER_OF_ROS_ROI_INPUT_BUSES/5+1,7) then
          slink_slice_cntr_up_fsm <= '1';
          SLINK_BUILDER_NEXT <= WAIT_FOR_FIFO_DATA;
        else
          slink_data_in_fsm(31 downto 28) <= FIBER_WORD_TYPE;
          slink_data_in_fsm(27 downto 3) <= slink_fiber_cntr_data_2a(to_integer(slink_slice_cntr))(to_integer(fiber_cntr))(27 downto 3);
          slink_data_in_fsm(2 downto 0) <= (others => '0');
          slink_slice_cntr_up_fsm <= '0';
          SLINK_BUILDER_NEXT <= FIBER_CNTRS;
        end if;

      when WAIT_FOR_FIFO_DATA =>
        slink_fifo_wr_en_fsm <= '0';
        if wait_cntr = 0 then
          slice_fifo_rd_en_fsm(to_integer(bcid_cntr)) <= '1';
        elsif wait_cntr = 2 then
          SLINK_BUILDER_NEXT <= DATA_WRITE;
        else
          SLINK_BUILDER_NEXT <= WAIT_FOR_FIFO_DATA;
        end if;
        
      when DATA_WRITE =>
        if fifo_data_out_a(to_integer(bcid_cntr))(135) = '1' and bcid_cntr < 8 then
          bcid_cntr_up_fsm <= '1';
          slink_fifo_wr_en_fsm <= '0';
          SLINK_BUILDER_NEXT <= BLOCK_HEADER;
        elsif
          fifo_data_out_a(to_integer(bcid_cntr))(135) = '1' and bcid_cntr >= 8 then
          slink_data_in_fsm(32) <= '0';
          SLINK_BUILDER_NEXT <= FINISHED;
        elsif tob_conseq_nrs_l = x"f" then
          slink_fifo_wr_en_fsm <= '0';
          SLINK_BUILDER_NEXT <= WAIT_FOR_FIFO_DATA;
        else
          slink_fifo_wr_en_fsm <= '1';
          slink_data_in_fsm(31 downto 0) <=
          tob_data_out(32*
          (std_int(tob_conseq_nrs_l(to_integer(tob_conseq_pntr+1)*4-1 downto to_integer(tob_conseq_pntr)*4))+1)-1
          downto 32*
          (std_int(tob_conseq_nrs_l(to_integer(tob_conseq_pntr+1)*4-1 downto to_integer(tob_conseq_pntr)*4))));
          SLINK_BUILDER_NEXT <= DATA_WRITE;
        end if;

      when FINISHED =>
        slink_data_in_fsm(32) <= '0';
        SLINK_BUILDER_NEXT <= IDLE;
        
      when others    =>
        SLINK_BUILDER_NEXT <= IDLE;
    end case;
  end process SLINK_BUILDER_PROC;

  TOB_CONSEQ_CNTR : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if SLINK_BUILDER_CURRENT = WAIT_FOR_FIFO_DATA then
        tob_conseq_pntr <= (others => '0');
      elsif SLINK_BUILDER_CURRENT = DATA_WRITE then
        tob_conseq_pntr <= tob_conseq_pntr + 1;
      else
        tob_conseq_pntr <= tob_conseq_pntr;
      end if;
    end if;
  end process TOB_CONSEQ_CNTR;

  
  
  FIBER_CNTR_INST : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if SLINK_BUILDER_CURRENT = IDLE then
        fiber_cntr <= (others => '0');
      elsif SLINK_BUILDER_CURRENT = FIBER_CNTRS then
        fiber_cntr <= fiber_cntr + 1;
      else
        fiber_cntr <= fiber_cntr;
      end if;
    end if;
  end process FIBER_CNTR_INST;

  WAIT_CNTR_INST : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if SLINK_BUILDER_CURRENT = FIBER_CNTRS then
        wait_cntr <= (others => '0');
      elsif SLINK_BUILDER_CURRENT = WAIT_FOR_FIFO_DATA then
        wait_cntr <= wait_cntr + 1;
      else
        wait_cntr <= wait_cntr;
      end if;
    end if;
  end process WAIT_CNTR_INST;
  
  BCID_CNTR_PROC : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if SLINK_BUILDER_CURRENT = IDLE  then
        bcid_cntr <= (others => '0');
      elsif bcid_cntr_up = '1' then
        bcid_cntr <= bcid_cntr + 1;
      else
        bcid_cntr <= bcid_cntr;
      end if;
    end if;
  end process BCID_CNTR_PROC;

  SLINK_SLICE_CNTR_PROC : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if SLINK_BUILDER_CURRENT = IDLE  then
        slink_slice_cntr <= (others => '0');
      elsif slink_slice_cntr_up = '1' then
        slink_slice_cntr <= slink_slice_cntr + 1;
      else
        slink_slice_cntr <= slink_slice_cntr;
      end if;
    end if;
  end process SLINK_SLICE_CNTR_PROC;

  SET_NEXT_EVENT_FINISHED : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if RESET = '1' then
        event_cntr <= (others => '0');
      elsif SLINK_BUILDER_CURRENT = FINISHED and event_readout_pulse = '0' then
        event_cntr <= event_cntr + 1;
      elsif SLINK_BUILDER_CURRENT /= FINISHED and event_readout_pulse = '1' then 
        event_cntr <= event_cntr - 1;
      else
        event_cntr <= event_cntr;
      end if;
    end if;
  end process SET_NEXT_EVENT_FINISHED;

  --crossing clock domains
  
  AVOID_METASTABILITY_EVENT_FINISHED : process (CLK)
  begin
    if rising_edge(CLK) then
      for i in 0 to 2 loop
       cdc_event_finished_v(i+1) <=  cdc_event_finished_v(i);
      end loop;  -- i
    end if;
  end process AVOID_METASTABILITY_EVENT_FINISHED;
  
  SET_EVENT_CNTR_PULSE_DOWN : process (CLK_SPEED)
  begin
    if rising_edge(CLK_SPEED) then
      if cdc_event_finished_v(4) = '0' and cdc_event_finished_v(3) = '1' then
        event_readout_pulse <= '1';
      else
        event_readout_pulse <= '0';
      end if;
    end if;
  end process SET_EVENT_CNTR_PULSE_DOWN;

  -----------------------------------------------------------------------------
  -- SLINK
  -----------------------------------------------------------------------------
  SLINK_DATA_OUT <= slink_data_out_l(31 downto 0);
  slink_fifo_rd_en <= SLINK_READY_IN;

  SET_EVENTREADY : process (SLINK_CLK)
  begin
    if rising_edge(SLINK_CLK) then
      if event_cntr = 0 then
        SLINK_EVENT_READY_OUT <= '0';
      else
        SLINK_EVENT_READY_OUT <= '1' and slink_data_out_l_end_pulse;
      end if;
    end if;
  end process SET_EVENTREADY;
  
  MAKE_EVENT_END_PULSE : process (SLINK_CLK)
  begin
    if rising_edge(SLINK_CLK) then
      if slink_data_out_l_sync = '1' and  slink_data_out_l(32) = '0' then
        slink_data_out_l_end_pulse <= '1';
        slink_data_out_l_sync <= slink_data_out_l(32);
      else
        slink_data_out_l_end_pulse <= '0';
        slink_data_out_l_sync <= slink_data_out_l(32);
      end if;
    end if;
  end process MAKE_EVENT_END_PULSE;

  MAKE_LONG_SIGNAL_TIME_DOMAIN_CROSS : process (SLINK_CLK)
  begin
    if rising_edge(SLINK_CLK) then
      if slink_data_out_l_end_pulse = '1' then
        cdc_cntr <= (others => '0');
        cdc_event_finished <= '1';
      elsif cdc_cntr = x"f" then
        cdc_cntr <= cdc_cntr;
        cdc_event_finished <= '0';
      else
        cdc_cntr <= cdc_cntr + 1;
        cdc_event_finished <= '1';
      end if;
    end if;
  end process MAKE_LONG_SIGNAL_TIME_DOMAIN_CROSS;
  
  
      
end tob_slink_builder;
    
 
